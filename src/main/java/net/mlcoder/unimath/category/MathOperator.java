package net.mlcoder.unimath.category;

import lombok.Getter;
import lombok.ToString;
import lombok.experimental.Accessors;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@ToString @Getter @Accessors(fluent = true)
public class MathOperator implements UniCode {
    public static final List<UniCode> symbols = new ArrayList<>();

    public final String desc;
    public final int codePoint;
    public final String codeStr;
    public final String chars;
    public final String generalCategory;
    public final int combiningClass;
    public final String[] tokenized;

    @Nullable
    public final String latex;

    @Nullable
    public final String ulatex;

    @Nullable
    public final String mathCategory;

    MathOperator(int codePoint, String desc, String chars, String generalCategory, int combiningClass) {
        this(codePoint, desc, chars, generalCategory, combiningClass, null, null, null);
    }

    MathOperator(int codePoint, String desc, String chars, String generalCategory, int combiningClass,
                 @Nullable String latex, @Nullable String ulatex, @Nullable String mathCategory) {
        this.codePoint = codePoint;
        this.codeStr = String.format("U+%04X", codePoint);
        this.desc = desc;
        this.generalCategory = generalCategory;
        this.combiningClass = combiningClass;
        this.chars = chars;
        this.latex = latex;
        this.ulatex = ulatex;
        this.mathCategory = mathCategory;

        String _latex = latex != null ? " " + latex.substring(1) : "";
        String _ulatex = ulatex != null ? " " + ulatex.substring(1) : "";
        String concanated = (_latex + _ulatex + " " + desc).trim();
        this.tokenized = Arrays.stream(concanated.split(" "))
            .filter(s -> s.length() != 0).toArray(String[]::new);
    }

    static {
        symbols.add(new MathOperator(0x2200, "for all", "∀", "Sm", 0, "\\forall", null, "ordinary"));
        symbols.add(new MathOperator(0x2201, "complement", "∁", "Sm", 0, "\\complement", null, "ordinary"));
        symbols.add(new MathOperator(0x2202, "partial differential", "∂", "Sm", 0, "\\partial", null, "alphabetical"));
        symbols.add(new MathOperator(0x2203, "there exists", "∃", "Sm", 0, "\\exists", null, "ordinary"));
        symbols.add(new MathOperator(0x2204, "there does not exist", "∄", "Sm", 0, "\\nexists", null, "ordinary"));
        symbols.add(new MathOperator(0x2205, "empty set", "∅", "Sm", 0, "\\varnothing", null, "ordinary"));
        symbols.add(new MathOperator(0x2206, "increment", "∆", "Sm", 0, null, "\\increment", "ordinary"));
        symbols.add(new MathOperator(0x2207, "nabla", "∇", "Sm", 0, "\\nabla", null, "alphabetical"));
        symbols.add(new MathOperator(0x2208, "element of", "∈", "Sm", 0, "\\in", null, "relation"));
        symbols.add(new MathOperator(0x2209, "not an element of", "∉", "Sm", 0, "\\notin", null, "relation"));
        symbols.add(new MathOperator(0x220A, "small element of", "∊", "Sm", 0, null, "\\smallin", "relation"));
        symbols.add(new MathOperator(0x220B, "contains as member", "∋", "Sm", 0, "\\ni", null, "relation"));
        symbols.add(new MathOperator(0x220C, "does not contain as member", "∌", "Sm", 0, "\\nni", null, "relation"));
        symbols.add(new MathOperator(0x220D, "small contains as member", "∍", "Sm", 0, null, "\\smallni", "relation"));
        symbols.add(new MathOperator(0x220E, "end of proof", "∎", "Sm", 0, null, "\\QED", "ordinary"));
        symbols.add(new MathOperator(0x220F, "n-ary product", "∏", "Sm", 0, "\\prod", null, "big operators"));
        symbols.add(new MathOperator(0x2210, "n-ary coproduct", "∐", "Sm", 0, "\\coprod", null, "big operators"));
        symbols.add(new MathOperator(0x2211, "n-ary summation", "∑", "Sm", 0, "\\sum", null, "big operators"));
        symbols.add(new MathOperator(0x2212, "-", "−", "Sm", 0, null, "\\minus", "binary relation"));
        symbols.add(new MathOperator(0x2213, "minus-or-+", "∓", "Sm", 0, "\\mp", null, "binary relation"));
        symbols.add(new MathOperator(0x2214, "dot +", "∔", "Sm", 0, "\\dotplus", null, "binary relation"));
        symbols.add(new MathOperator(0x2215, "division slash", "∕", "Sm", 0, "\\slash", "\\divslash", "binary relation"));
        symbols.add(new MathOperator(0x2216, "set -", "∖", "Sm", 0, "\\smallsetminus", null, "binary relation"));
        symbols.add(new MathOperator(0x2217, "asterisk operator", "∗", "Sm", 0, "\\ast", null, "binary relation"));
        symbols.add(new MathOperator(0x2218, "ring operator", "∘", "Sm", 0, "\\circ", "\\vysmwhtcircle", "binary relation"));
        symbols.add(new MathOperator(0x2219, "bullet operator", "∙", "Sm", 0, "\\bullet", "\\vysmblkcircle", "binary relation"));
        symbols.add(new MathOperator(0x221A, "square root", "√", "Sm", 0, "\\sqrt", "\\surd", "ordinary"));
        symbols.add(new MathOperator(0x221B, "cube root", "∛", "Sm", 0, "\\sqrt[3]", "\\cuberoot", "opening"));
        symbols.add(new MathOperator(0x221C, "fourth root", "∜", "Sm", 0, "\\sqrt[4]", "\\fourthroot", "opening"));
        symbols.add(new MathOperator(0x221D, "proportional to", "∝", "Sm", 0, "\\propto", null, "relation"));
        symbols.add(new MathOperator(0x221E, "infinity", "∞", "Sm", 0, "\\infty", null, "ordinary"));
        symbols.add(new MathOperator(0x221F, "right angle", "∟", "Sm", 0, "\\rightangle", null, "ordinary"));
        symbols.add(new MathOperator(0x2220, "angle", "∠", "Sm", 0, "\\angle", null, "ordinary"));
        symbols.add(new MathOperator(0x2221, "measured angle", "∡", "Sm", 0, "\\measuredangle", null, "ordinary"));
        symbols.add(new MathOperator(0x2222, "spherical angle", "∢", "Sm", 0, "\\sphericalangle", null, "ordinary"));
        symbols.add(new MathOperator(0x2223, "divides", "∣", "Sm", 0, "\\mid", null, "relation"));
        symbols.add(new MathOperator(0x2224, "does not divide", "∤", "Sm", 0, "\\nmid", null, "relation"));
        symbols.add(new MathOperator(0x2225, "parallel to", "∥", "Sm", 0, "\\parallel", null, "relation"));
        symbols.add(new MathOperator(0x2226, "not parallel to", "∦", "Sm", 0, "\\nparallel", null, "relation"));
        symbols.add(new MathOperator(0x2227, "logical and", "∧", "Sm", 0, "\\wedge", null, "binary relation"));
        symbols.add(new MathOperator(0x2228, "logical or", "∨", "Sm", 0, "\\vee", null, "binary relation"));
        symbols.add(new MathOperator(0x2229, "intersection", "∩", "Sm", 0, "\\cap", null, "binary relation"));
        symbols.add(new MathOperator(0x222A, "union", "∪", "Sm", 0, "\\cup", null, "binary relation"));
        symbols.add(new MathOperator(0x222B, "integral", "∫", "Sm", 0, "\\int", null, "big operators"));
        symbols.add(new MathOperator(0x222C, "double integral", "∬", "Sm", 0, "\\iint", null, "big operators"));
        symbols.add(new MathOperator(0x222D, "triple integral", "∭", "Sm", 0, "\\iiint", null, "big operators"));
        symbols.add(new MathOperator(0x222E, "contour integral", "∮", "Sm", 0, "\\oint", null, "big operators"));
        symbols.add(new MathOperator(0x222F, "surface integral", "∯", "Sm", 0, "\\oiint", null, "big operators"));
        symbols.add(new MathOperator(0x2230, "volume integral", "∰", "Sm", 0, "\\oiiint", null, "big operators"));
        symbols.add(new MathOperator(0x2231, "clockwise integral", "∱", "Sm", 0, null, "\\intclockwise", "big operators"));
        symbols.add(new MathOperator(0x2232, "clockwise contour integral", "∲", "Sm", 0, "\\varointclockwise", null, "big operators"));
        symbols.add(new MathOperator(0x2233, "anticlockwise contour integral", "∳", "Sm", 0, "\\ointctrclockwise", null, "big operators"));
        symbols.add(new MathOperator(0x2234, "therefore", "∴", "Sm", 0, "\\therefore", null, "ordinary"));
        symbols.add(new MathOperator(0x2235, "because", "∵", "Sm", 0, "\\because", null, "ordinary"));
        symbols.add(new MathOperator(0x2236, "ratio", "∶", "Sm", 0, null, "\\mathratio", "relation"));
        symbols.add(new MathOperator(0x2237, "proportion", "∷", "Sm", 0, "\\Proportion", "\\Colon", "relation"));
        symbols.add(new MathOperator(0x2238, "dot -", "∸", "Sm", 0, null, "\\dotminus", "binary relation"));
        symbols.add(new MathOperator(0x2239, "excess", "∹", "Sm", 0, "\\eqcolon", "\\dashcolon", "relation"));
        symbols.add(new MathOperator(0x223A, "geometric proportion", "∺", "Sm", 0, null, "\\dotsminusdots", "relation"));
        symbols.add(new MathOperator(0x223B, "homothetic", "∻", "Sm", 0, null, "\\kernelcontraction", "relation"));
        symbols.add(new MathOperator(0x223C, "tilde operator", "∼", "Sm", 0, "\\sim", null, "relation"));
        symbols.add(new MathOperator(0x223D, "reversed tilde", "∽", "Sm", 0, "\\backsim", null, "relation"));
        symbols.add(new MathOperator(0x223E, "inverted lazy s", "∾", "Sm", 0, null, "\\invlazys", "binary relation"));
        symbols.add(new MathOperator(0x223F, "sine wave", "∿", "Sm", 0, "\\AC", "\\sinewave", "ordinary"));
        symbols.add(new MathOperator(0x2240, "wreath product", "≀", "Sm", 0, "\\wr", null, "binary relation"));
        symbols.add(new MathOperator(0x2241, "not tilde", "≁", "Sm", 0, "\\nsim", null, "relation"));
        symbols.add(new MathOperator(0x2242, "minus tilde", "≂", "Sm", 0, "\\eqsim", null, "relation"));
        symbols.add(new MathOperator(0x2243, "asymptotically equal to", "≃", "Sm", 0, "\\simeq", "\\sime", "relation"));
        symbols.add(new MathOperator(0x2244, "not asymptotically equal to", "≄", "Sm", 0, "\\nsimeq", null, "relation"));
        symbols.add(new MathOperator(0x2245, "approximately equal to", "≅", "Sm", 0, "\\cong", null, "relation"));
        symbols.add(new MathOperator(0x2246, "approximately but not actually equal to", "≆", "Sm", 0, null, "\\simneqq", "relation"));
        symbols.add(new MathOperator(0x2247, "neither approximately nor actually equal to", "≇", "Sm", 0, "\\ncong", null, "relation"));
        symbols.add(new MathOperator(0x2248, "almost equal to", "≈", "Sm", 0, "\\approx", null, "relation"));
        symbols.add(new MathOperator(0x2249, "not almost equal to", "≉", "Sm", 0, "\\napprox", null, "relation"));
        symbols.add(new MathOperator(0x224A, "almost equal or equal to", "≊", "Sm", 0, "\\approxeq", null, "relation"));
        symbols.add(new MathOperator(0x224B, "triple tilde", "≋", "Sm", 0, null, "\\approxident", "relation"));
        symbols.add(new MathOperator(0x224C, "all equal to", "≌", "Sm", 0, null, "\\backcong", "relation"));
        symbols.add(new MathOperator(0x224D, "equivalent to", "≍", "Sm", 0, "\\asymp", null, "relation"));
        symbols.add(new MathOperator(0x224E, "geometrically equivalent to", "≎", "Sm", 0, "\\Bumpeq", null, "relation"));
        symbols.add(new MathOperator(0x224F, "difference between", "≏", "Sm", 0, "\\bumpeq", null, "relation"));
        symbols.add(new MathOperator(0x2250, "approaches the limit", "≐", "Sm", 0, "\\doteq", null, "relation"));
        symbols.add(new MathOperator(0x2251, "geometrically equal to", "≑", "Sm", 0, "\\Doteq", null, "relation"));
        symbols.add(new MathOperator(0x2252, "approximately equal to or the image of", "≒", "Sm", 0, "\\fallingdotseq", null, "relation"));
        symbols.add(new MathOperator(0x2253, "image of or approximately equal to", "≓", "Sm", 0, "\\risingdotseq", null, "relation"));
        symbols.add(new MathOperator(0x2254, "colon =", "≔", "Sm", 0, "\\coloneq", null, "relation"));
        symbols.add(new MathOperator(0x2255, "equals colon", "≕", "Sm", 0, "\\eqcolon", null, "relation"));
        symbols.add(new MathOperator(0x2256, "ring in equal to", "≖", "Sm", 0, "\\eqcirc", null, "relation"));
        symbols.add(new MathOperator(0x2257, "ring equal to", "≗", "Sm", 0, "\\circeq", null, "relation"));
        symbols.add(new MathOperator(0x2258, "corresponds to", "≘", "Sm", 0, null, "\\arceq", "relation"));
        symbols.add(new MathOperator(0x2259, "estimates", "≙", "Sm", 0, "\\corresponds", "\\wedgeq", "relation"));
        symbols.add(new MathOperator(0x225A, "equiangular to", "≚", "Sm", 0, null, "\\veeeq", "relation"));
        symbols.add(new MathOperator(0x225B, "star =", "≛", "Sm", 0, null, "\\stareq", "relation"));
        symbols.add(new MathOperator(0x225C, "delta equal to", "≜", "Sm", 0, "\\triangleq", null, "relation"));
        symbols.add(new MathOperator(0x225D, "equal to by definition", "≝", "Sm", 0, null, "\\eqdef", "relation"));
        symbols.add(new MathOperator(0x225E, "measured by", "≞", "Sm", 0, null, "\\measeq", "relation"));
        symbols.add(new MathOperator(0x225F, "questioned equal to", "≟", "Sm", 0, null, "\\questeq", "relation"));
        symbols.add(new MathOperator(0x2260, "not equal to", "≠", "Sm", 0, "\\neq", "\\ne", "relation"));
        symbols.add(new MathOperator(0x2261, "identical to", "≡", "Sm", 0, "\\equiv", null, "relation"));
        symbols.add(new MathOperator(0x2262, "not identical to", "≢", "Sm", 0, "\\nequiv", null, "relation"));
        symbols.add(new MathOperator(0x2263, "strictly equivalent to", "≣", "Sm", 0, null, "\\Equiv", "relation"));
        symbols.add(new MathOperator(0x2264, "less-than or equal to", "≤", "Sm", 0, "\\leq", null, "relation"));
        symbols.add(new MathOperator(0x2265, "greater-than or equal to", "≥", "Sm", 0, "\\geq", null, "relation"));
        symbols.add(new MathOperator(0x2266, "less-than over equal to", "≦", "Sm", 0, "\\leqq", null, "relation"));
        symbols.add(new MathOperator(0x2267, "greater-than over equal to", "≧", "Sm", 0, "\\geqq", null, "relation"));
        symbols.add(new MathOperator(0x2268, "less-than but not equal to", "≨", "Sm", 0, "\\lneqq", null, "relation"));
        symbols.add(new MathOperator(0x2269, "greater-than but not equal to", "≩", "Sm", 0, "\\gneqq", null, "relation"));
        symbols.add(new MathOperator(0x226A, "much less-than", "≪", "Sm", 0, "\\ll", null, "relation"));
        symbols.add(new MathOperator(0x226B, "much greater-than", "≫", "Sm", 0, "\\gg", null, "relation"));
        symbols.add(new MathOperator(0x226C, "between", "≬", "Sm", 0, "\\between", null, "relation"));
        symbols.add(new MathOperator(0x226D, "not equivalent to", "≭", "Sm", 0, "\\notasymp", "\\nasymp", "relation"));
        symbols.add(new MathOperator(0x226E, "not less-than", "≮", "Sm", 0, "\\nless", null, "relation"));
        symbols.add(new MathOperator(0x226F, "not greater-than", "≯", "Sm", 0, "\\ngtr", null, "relation"));
        symbols.add(new MathOperator(0x2270, "neither less-than nor equal to", "≰", "Sm", 0, "\\nleq", null, "relation"));
        symbols.add(new MathOperator(0x2271, "neither greater-than nor equal to", "≱", "Sm", 0, "\\ngeq", null, "relation"));
        symbols.add(new MathOperator(0x2272, "less-than or equivalent to", "≲", "Sm", 0, "\\lesssim", null, "relation"));
        symbols.add(new MathOperator(0x2273, "greater-than or equivalent to", "≳", "Sm", 0, "\\gtrsim", null, "relation"));
        symbols.add(new MathOperator(0x2274, "neither less-than nor equivalent to", "≴", "Sm", 0, "\\NotLessTilde", "\\nlesssim", "relation"));
        symbols.add(new MathOperator(0x2275, "neither greater-than nor equivalent to", "≵", "Sm", 0, "\\NotGreaterTilde", "\\ngtrsim", "relation"));
        symbols.add(new MathOperator(0x2276, "less-than or greater-than", "≶", "Sm", 0, "\\lessgtr", null, "relation"));
        symbols.add(new MathOperator(0x2277, "greater-than or less-than", "≷", "Sm", 0, "\\gtrless", null, "relation"));
        symbols.add(new MathOperator(0x2278, "neither less-than nor greater-than", "≸", "Sm", 0, null, "\\nlessgtr", "relation"));
        symbols.add(new MathOperator(0x2279, "neither greater-than nor less-than", "≹", "Sm", 0, "\\NotGreaterLess", "\\ngtrless", "relation"));
        symbols.add(new MathOperator(0x227A, "precedes", "≺", "Sm", 0, "\\prec", null, "relation"));
        symbols.add(new MathOperator(0x227B, "succeeds", "≻", "Sm", 0, "\\succ", null, "relation"));
        symbols.add(new MathOperator(0x227C, "precedes or equal to", "≼", "Sm", 0, "\\preccurlyeq", null, "relation"));
        symbols.add(new MathOperator(0x227D, "succeeds or equal to", "≽", "Sm", 0, "\\succcurlyeq", null, "relation"));
        symbols.add(new MathOperator(0x227E, "precedes or equivalent to", "≾", "Sm", 0, "\\precsim", null, "relation"));
        symbols.add(new MathOperator(0x227F, "succeeds or equivalent to", "≿", "Sm", 0, "\\succsim", null, "relation"));
        symbols.add(new MathOperator(0x2280, "does not precede", "⊀", "Sm", 0, "\\nprec", null, "relation"));
        symbols.add(new MathOperator(0x2281, "does not succeed", "⊁", "Sm", 0, "\\nsucc", null, "relation"));
        symbols.add(new MathOperator(0x2282, "subset of", "⊂", "Sm", 0, "\\subset", null, "relation"));
        symbols.add(new MathOperator(0x2283, "superset of", "⊃", "Sm", 0, "\\supset", null, "relation"));
        symbols.add(new MathOperator(0x2284, "not a subset of", "⊄", "Sm", 0, "\\nsubset", null, "relation"));
        symbols.add(new MathOperator(0x2285, "not a superset of", "⊅", "Sm", 0, "\\nsupset", null, "relation"));
        symbols.add(new MathOperator(0x2286, "subset of or equal to", "⊆", "Sm", 0, "\\subseteq", null, "relation"));
        symbols.add(new MathOperator(0x2287, "superset of or equal to", "⊇", "Sm", 0, "\\supseteq", null, "relation"));
        symbols.add(new MathOperator(0x2288, "neither a subset of nor equal to", "⊈", "Sm", 0, "\\nsubseteq", null, "relation"));
        symbols.add(new MathOperator(0x2289, "neither a superset of nor equal to", "⊉", "Sm", 0, "\\nsupseteq", null, "relation"));
        symbols.add(new MathOperator(0x228A, "subset of with not equal to", "⊊", "Sm", 0, "\\subsetneq", null, "relation"));
        symbols.add(new MathOperator(0x228B, "superset of with not equal to", "⊋", "Sm", 0, "\\supsetneq", null, "relation"));
        symbols.add(new MathOperator(0x228C, "multiset", "⊌", "Sm", 0, null, "\\cupleftarrow", "binary relation"));
        symbols.add(new MathOperator(0x228D, "multiset multiplication", "⊍", "Sm", 0, null, "\\cupdot", "binary relation"));
        symbols.add(new MathOperator(0x228E, "multiset union", "⊎", "Sm", 0, "\\uplus", null, "binary relation"));
        symbols.add(new MathOperator(0x228F, "square image of", "⊏", "Sm", 0, "\\sqsubset", null, "relation"));
        symbols.add(new MathOperator(0x2290, "square original of", "⊐", "Sm", 0, "\\sqsupset", null, "relation"));
        symbols.add(new MathOperator(0x2291, "square image of or equal to", "⊑", "Sm", 0, "\\sqsubseteq", null, "relation"));
        symbols.add(new MathOperator(0x2292, "square original of or equal to", "⊒", "Sm", 0, "\\sqsupseteq", null, "relation"));
        symbols.add(new MathOperator(0x2293, "square cap", "⊓", "Sm", 0, "\\sqcap", null, "binary relation"));
        symbols.add(new MathOperator(0x2294, "square cup", "⊔", "Sm", 0, "\\sqcup", null, "binary relation"));
        symbols.add(new MathOperator(0x2295, "circled +", "⊕", "Sm", 0, "\\oplus", null, "binary relation"));
        symbols.add(new MathOperator(0x2296, "circled -", "⊖", "Sm", 0, "\\ominus", null, "binary relation"));
        symbols.add(new MathOperator(0x2297, "circled times", "⊗", "Sm", 0, "\\otimes", null, "binary relation"));
        symbols.add(new MathOperator(0x2298, "circled division slash", "⊘", "Sm", 0, "\\oslash", null, "binary relation"));
        symbols.add(new MathOperator(0x2299, "circled dot operator", "⊙", "Sm", 0, "\\odot", null, "binary relation"));
        symbols.add(new MathOperator(0x229A, "circled ring operator", "⊚", "Sm", 0, "\\circledcirc", null, "binary relation"));
        symbols.add(new MathOperator(0x229B, "circled asterisk operator", "⊛", "Sm", 0, "\\circledast", null, "binary relation"));
        symbols.add(new MathOperator(0x229C, "circled =", "⊜", "Sm", 0, null, "\\circledequal", "binary relation"));
        symbols.add(new MathOperator(0x229D, "circled dash", "⊝", "Sm", 0, "\\circleddash", null, "binary relation"));
        symbols.add(new MathOperator(0x229E, "squared +", "⊞", "Sm", 0, "\\boxplus", null, "binary relation"));
        symbols.add(new MathOperator(0x229F, "squared -", "⊟", "Sm", 0, "\\boxminus", null, "binary relation"));
        symbols.add(new MathOperator(0x22A0, "squared times", "⊠", "Sm", 0, "\\boxtimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22A1, "squared dot operator", "⊡", "Sm", 0, "\\boxdot", null, "binary relation"));
        symbols.add(new MathOperator(0x22A2, "right tack", "⊢", "Sm", 0, "\\vdash", null, "relation"));
        symbols.add(new MathOperator(0x22A3, "left tack", "⊣", "Sm", 0, "\\dashv", null, "relation"));
        symbols.add(new MathOperator(0x22A4, "down tack", "⊤", "Sm", 0, "\\top", null, "ordinary"));
        symbols.add(new MathOperator(0x22A5, "up tack", "⊥", "Sm", 0, "\\bot", null, "ordinary"));
        symbols.add(new MathOperator(0x22A6, "assertion", "⊦", "Sm", 0, null, "\\assert", "relation"));
        symbols.add(new MathOperator(0x22A7, "models", "⊧", "Sm", 0, "\\models", null, "relation"));
        symbols.add(new MathOperator(0x22A8, "true", "⊨", "Sm", 0, "\\vDash", null, "relation"));
        symbols.add(new MathOperator(0x22A9, "forces", "⊩", "Sm", 0, "\\Vdash", null, "relation"));
        symbols.add(new MathOperator(0x22AA, "triple vertical bar right turnstile", "⊪", "Sm", 0, "\\Vvdash", null, "relation"));
        symbols.add(new MathOperator(0x22AB, "double vertical bar double right turnstile", "⊫", "Sm", 0, "\\VDash", null, "relation"));
        symbols.add(new MathOperator(0x22AC, "does not prove", "⊬", "Sm", 0, "\\nvdash", null, "relation"));
        symbols.add(new MathOperator(0x22AD, "not true", "⊭", "Sm", 0, "\\nvDash", null, "relation"));
        symbols.add(new MathOperator(0x22AE, "does not force", "⊮", "Sm", 0, "\\nVdash", null, "relation"));
        symbols.add(new MathOperator(0x22AF, "negated double vertical bar double right turnstile", "⊯", "Sm", 0, "\\nVDash", null, "relation"));
        symbols.add(new MathOperator(0x22B0, "precedes under relation", "⊰", "Sm", 0, null, "\\prurel", "relation"));
        symbols.add(new MathOperator(0x22B1, "succeeds under relation", "⊱", "Sm", 0, null, "\\scurel", "relation"));
        symbols.add(new MathOperator(0x22B2, "normal subgroup of", "⊲", "Sm", 0, "\\vartriangleleft", null, "relation"));
        symbols.add(new MathOperator(0x22B3, "contains as normal subgroup", "⊳", "Sm", 0, "\\vartriangleright", null, "relation"));
        symbols.add(new MathOperator(0x22B4, "normal subgroup of or equal to", "⊴", "Sm", 0, "\\trianglelefteq", null, "relation"));
        symbols.add(new MathOperator(0x22B5, "contains as normal subgroup or equal to", "⊵", "Sm", 0, "\\trianglerighteq", null, "relation"));
        symbols.add(new MathOperator(0x22B6, "original of", "⊶", "Sm", 0, "\\multimapdotbothA", "\\origof", "relation"));
        symbols.add(new MathOperator(0x22B7, "image of", "⊷", "Sm", 0, "\\multimapdotbothB", "\\imageof", "relation"));
        symbols.add(new MathOperator(0x22B8, "multimap", "⊸", "Sm", 0, "\\multimap", null, "relation"));
        symbols.add(new MathOperator(0x22B9, "hermitian conjugate matrix", "⊹", "Sm", 0, null, "\\hermitmatrix", "ordinary"));
        symbols.add(new MathOperator(0x22BA, "intercalate", "⊺", "Sm", 0, "\\intercal", null, "binary relation"));
        symbols.add(new MathOperator(0x22BB, "xor", "⊻", "Sm", 0, "\\veebar", null, "binary relation"));
        symbols.add(new MathOperator(0x22BC, "nand", "⊼", "Sm", 0, "\\barwedge", null, "binary relation"));
        symbols.add(new MathOperator(0x22BD, "nor", "⊽", "Sm", 0, null, "\\barvee", "binary relation"));
        symbols.add(new MathOperator(0x22BE, "right angle with arc", "⊾", "Sm", 0, null, "\\measuredrightangle", "ordinary"));
        symbols.add(new MathOperator(0x22BF, "right triangle", "⊿", "Sm", 0, null, "\\varlrtriangle", "ordinary"));
        symbols.add(new MathOperator(0x22C0, "n-ary logical and", "⋀", "Sm", 0, "\\bigwedge", null, "big operators"));
        symbols.add(new MathOperator(0x22C1, "n-ary logical or", "⋁", "Sm", 0, "\\bigvee", null, "big operators"));
        symbols.add(new MathOperator(0x22C2, "n-ary intersection", "⋂", "Sm", 0, "\\bigcap", null, "big operators"));
        symbols.add(new MathOperator(0x22C3, "n-ary union", "⋃", "Sm", 0, "\\bigcup", null, "big operators"));
        symbols.add(new MathOperator(0x22C4, "diamond operator", "⋄", "Sm", 0, "\\diamond", "\\smwhtdiamond", "binary relation"));
        symbols.add(new MathOperator(0x22C5, "dot operator", "⋅", "Sm", 0, "\\cdot", null, "binary relation"));
        symbols.add(new MathOperator(0x22C6, "star operator", "⋆", "Sm", 0, "\\star", null, "binary relation"));
        symbols.add(new MathOperator(0x22C7, "division times", "⋇", "Sm", 0, "\\divideontimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22C8, "bowtie", "⋈", "Sm", 0, "\\bowtie", null, "relation"));
        symbols.add(new MathOperator(0x22C9, "left normal factor semidirect product", "⋉", "Sm", 0, "\\ltimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22CA, "right normal factor semidirect product", "⋊", "Sm", 0, "\\rtimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22CB, "left semidirect product", "⋋", "Sm", 0, "\\leftthreetimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22CC, "right semidirect product", "⋌", "Sm", 0, "\\rightthreetimes", null, "binary relation"));
        symbols.add(new MathOperator(0x22CD, "reversed tilde =", "⋍", "Sm", 0, "\\backsimeq", null, "relation"));
        symbols.add(new MathOperator(0x22CE, "curly logical or", "⋎", "Sm", 0, "\\curlyvee", null, "binary relation"));
        symbols.add(new MathOperator(0x22CF, "curly logical and", "⋏", "Sm", 0, "\\curlywedge", null, "binary relation"));
        symbols.add(new MathOperator(0x22D0, "double subset", "⋐", "Sm", 0, "\\Subset", null, "relation"));
        symbols.add(new MathOperator(0x22D1, "double superset", "⋑", "Sm", 0, "\\Supset", null, "relation"));
        symbols.add(new MathOperator(0x22D2, "double intersection", "⋒", "Sm", 0, "\\Cap", null, "binary relation"));
        symbols.add(new MathOperator(0x22D3, "double union", "⋓", "Sm", 0, "\\Cup", null, "binary relation"));
        symbols.add(new MathOperator(0x22D4, "pitchfork", "⋔", "Sm", 0, "\\pitchfork", null, "relation"));
        symbols.add(new MathOperator(0x22D5, "equal and parallel to", "⋕", "Sm", 0, "\\hash", "\\equalparallel", "relation"));
        symbols.add(new MathOperator(0x22D6, "less-than with dot", "⋖", "Sm", 0, "\\lessdot", null, "relation"));
        symbols.add(new MathOperator(0x22D7, "greater-than with dot", "⋗", "Sm", 0, "\\gtrdot", null, "relation"));
        symbols.add(new MathOperator(0x22D8, "very much less-than", "⋘", "Sm", 0, "\\lll", null, "relation"));
        symbols.add(new MathOperator(0x22D9, "very much greater-than", "⋙", "Sm", 0, "\\ggg", null, "relation"));
        symbols.add(new MathOperator(0x22DA, "less-than equal to or greater-than", "⋚", "Sm", 0, "\\lesseqgtr", null, "relation"));
        symbols.add(new MathOperator(0x22DB, "greater-than equal to or less-than", "⋛", "Sm", 0, "\\gtreqless", null, "relation"));
        symbols.add(new MathOperator(0x22DC, "equal to or less-than", "⋜", "Sm", 0, null, "\\eqless", "relation"));
        symbols.add(new MathOperator(0x22DD, "equal to or greater-than", "⋝", "Sm", 0, null, "\\eqgtr", "relation"));
        symbols.add(new MathOperator(0x22DE, "equal to or precedes", "⋞", "Sm", 0, "\\curlyeqprec", null, "relation"));
        symbols.add(new MathOperator(0x22DF, "equal to or succeeds", "⋟", "Sm", 0, "\\curlyeqsucc", null, "relation"));
        symbols.add(new MathOperator(0x22E0, "does not precede or equal", "⋠", "Sm", 0, "\\npreceq", "\\npreccurlyeq", "relation"));
        symbols.add(new MathOperator(0x22E1, "does not succeed or equal", "⋡", "Sm", 0, "\\nsucceq", "\\nsucccurlyeq", "relation"));
        symbols.add(new MathOperator(0x22E2, "not square image of or equal to", "⋢", "Sm", 0, "\\nsqsubseteq", null, "relation"));
        symbols.add(new MathOperator(0x22E3, "not square original of or equal to", "⋣", "Sm", 0, "\\nsqsupseteq", null, "relation"));
        symbols.add(new MathOperator(0x22E4, "square image of or not equal to", "⋤", "Sm", 0, null, "\\sqsubsetneq", "relation"));
        symbols.add(new MathOperator(0x22E5, "square original of or not equal to", "⋥", "Sm", 0, null, "\\sqsupsetneq", "relation"));
        symbols.add(new MathOperator(0x22E6, "less-than but not equivalent to", "⋦", "Sm", 0, "\\lnsim", null, "relation"));
        symbols.add(new MathOperator(0x22E7, "greater-than but not equivalent to", "⋧", "Sm", 0, "\\gnsim", null, "relation"));
        symbols.add(new MathOperator(0x22E8, "precedes but not equivalent to", "⋨", "Sm", 0, "\\precnsim", null, "relation"));
        symbols.add(new MathOperator(0x22E9, "succeeds but not equivalent to", "⋩", "Sm", 0, "\\succnsim", null, "relation"));
        symbols.add(new MathOperator(0x22EA, "not normal subgroup of", "⋪", "Sm", 0, "\\ntriangleleft", "\\nvartriangleleft", "relation"));
        symbols.add(new MathOperator(0x22EB, "does not contain as normal subgroup", "⋫", "Sm", 0, "\\ntriangleright", "\\nvartriangleright", "relation"));
        symbols.add(new MathOperator(0x22EC, "not normal subgroup of or equal to", "⋬", "Sm", 0, "\\ntrianglelefteq", null, "relation"));
        symbols.add(new MathOperator(0x22ED, "does not contain as normal subgroup or equal", "⋭", "Sm", 0, "\\ntrianglerighteq", null, "relation"));
        symbols.add(new MathOperator(0x22EE, "vertical ellipsis", "⋮", "Sm", 0, "\\vdots", null, "relation"));
        symbols.add(new MathOperator(0x22EF, "midline horizontal ellipsis", "⋯", "Sm", 0, "\\cdots", "\\unicodecdots", "ordinary"));
        symbols.add(new MathOperator(0x22F0, "up right diagonal ellipsis", "⋰", "Sm", 0, "\\iddots", "\\adots", "relation"));
        symbols.add(new MathOperator(0x22F1, "down right diagonal ellipsis", "⋱", "Sm", 0, "\\ddots", null, "relation"));
        symbols.add(new MathOperator(0x22F2, "element of with long horizontal stroke", "⋲", "Sm", 0, null, "\\disin", "relation"));
        symbols.add(new MathOperator(0x22F3, "element of with vertical bar at end of horizontal stroke", "⋳", "Sm", 0, null, "\\varisins", "relation"));
        symbols.add(new MathOperator(0x22F4, "small element of with vertical bar at end of horizontal stroke", "⋴", "Sm", 0, null, "\\isins", "relation"));
        symbols.add(new MathOperator(0x22F5, "element of with dot above", "⋵", "Sm", 0, null, "\\isindot", "relation"));
        symbols.add(new MathOperator(0x22F6, "element of with overbar", "⋶", "Sm", 0, "\\barin", "\\varisinobar", "relation"));
        symbols.add(new MathOperator(0x22F7, "small element of with overbar", "⋷", "Sm", 0, null, "\\isinobar", "relation"));
        symbols.add(new MathOperator(0x22F8, "element of with underbar", "⋸", "Sm", 0, null, "\\isinvb", "relation"));
        symbols.add(new MathOperator(0x22F9, "element of with two horizontal strokes", "⋹", "Sm", 0, null, "\\isinE", "relation"));
        symbols.add(new MathOperator(0x22FA, "contains with long horizontal stroke", "⋺", "Sm", 0, null, "\\nisd", "relation"));
        symbols.add(new MathOperator(0x22FB, "contains with vertical bar at end of horizontal stroke", "⋻", "Sm", 0, null, "\\varnis", "relation"));
        symbols.add(new MathOperator(0x22FC, "small contains with vertical bar at end of horizontal stroke", "⋼", "Sm", 0, null, "\\nis", "relation"));
        symbols.add(new MathOperator(0x22FD, "contains with overbar", "⋽", "Sm", 0, null, "\\varniobar", "relation"));
        symbols.add(new MathOperator(0x22FE, "small contains with overbar", "⋾", "Sm", 0, null, "\\niobar", "relation"));
        symbols.add(new MathOperator(0x22FF, "z notation bag membership", "⋿", "Sm", 0, null, "\\bagmember", "relation"));
        symbols.add(new MathOperator(0x27C0, "three dimensional angle", "⟀", "Sm", 0, null, "\\threedangle", "ordinary"));
        symbols.add(new MathOperator(0x27C1, "white triangle containing small white triangle", "⟁", "Sm", 0, null, "\\whiteinwhitetriangle", "ordinary"));
        symbols.add(new MathOperator(0x27C2, "perpendicular", "⟂", "Sm", 0, "\\perp", null, "relation"));
        symbols.add(new MathOperator(0x27C3, "open subset", "⟃", "Sm", 0, null, "\\subsetcirc", "ordinary"));
        symbols.add(new MathOperator(0x27C4, "open superset", "⟄", "Sm", 0, null, "\\supsetcirc", "ordinary"));
        symbols.add(new MathOperator(0x27C5, "left s-shaped bag delimiter", "⟅", "Ps", 0, "\\Lbag", "\\lbag", "opening"));
        symbols.add(new MathOperator(0x27C6, "right s-shaped bag delimiter", "⟆", "Pe", 0, "\\Rbag", "\\rbag", "closing"));
        symbols.add(new MathOperator(0x27C7, "or with dot inside", "⟇", "Sm", 0, null, "\\veedot", "binary relation"));
        symbols.add(new MathOperator(0x27C8, "reverse solidus preceding subset", "⟈", "Sm", 0, null, "\\bsolhsub", "relation"));
        symbols.add(new MathOperator(0x27C9, "superset preceding solidus", "⟉", "Sm", 0, null, "\\suphsol", "relation"));
        symbols.add(new MathOperator(0x27CA, "vertical bar with horizontal stroke", "⟊", "Sm", 0));
        symbols.add(new MathOperator(0x27CB, "mathematical rising diagonal", "⟋", "Sm", 0));
        symbols.add(new MathOperator(0x27CC, "long division", "⟌", "Sm", 0, null, "\\longdivision", "opening"));
        symbols.add(new MathOperator(0x27CD, "mathematical falling diagonal", "⟍", "Sm", 0));
        symbols.add(new MathOperator(0x27CE, "squared logical and", "⟎", "Sm", 0));
        symbols.add(new MathOperator(0x27CF, "squared logical or", "⟏", "Sm", 0));
        symbols.add(new MathOperator(0x27D0, "white diamond with centred dot", "⟐", "Sm", 0, "\\Diamonddot", "\\diamondcdot", "ordinary"));
        symbols.add(new MathOperator(0x27D1, "and with dot", "⟑", "Sm", 0, null, "\\wedgedot", "binary relation"));
        symbols.add(new MathOperator(0x27D2, "element of opening upwards", "⟒", "Sm", 0, null, "\\upin", "relation"));
        symbols.add(new MathOperator(0x27D3, "lower right corner with dot", "⟓", "Sm", 0, null, "\\pullback", "relation"));
        symbols.add(new MathOperator(0x27D4, "upper left corner with dot", "⟔", "Sm", 0, null, "\\pushout", "relation"));
        symbols.add(new MathOperator(0x27D5, "left outer join", "⟕", "Sm", 0, null, "\\leftouterjoin", "big operators"));
        symbols.add(new MathOperator(0x27D6, "right outer join", "⟖", "Sm", 0, null, "\\rightouterjoin", "big operators"));
        symbols.add(new MathOperator(0x27D7, "full outer join", "⟗", "Sm", 0, null, "\\fullouterjoin", "big operators"));
        symbols.add(new MathOperator(0x27D8, "large up tack", "⟘", "Sm", 0, null, "\\bigbot", "big operators"));
        symbols.add(new MathOperator(0x27D9, "large down tack", "⟙", "Sm", 0, null, "\\bigtop", "big operators"));
        symbols.add(new MathOperator(0x27DA, "left and right double turnstile", "⟚", "Sm", 0, null, "\\DashVDash", "relation"));
        symbols.add(new MathOperator(0x27DB, "left and right tack", "⟛", "Sm", 0, null, "\\dashVdash", "relation"));
        symbols.add(new MathOperator(0x27DC, "left multimap", "⟜", "Sm", 0, "\\multimapinv", null, "relation"));
        symbols.add(new MathOperator(0x27DD, "long right tack", "⟝", "Sm", 0, null, "\\vlongdash", "relation"));
        symbols.add(new MathOperator(0x27DE, "long left tack", "⟞", "Sm", 0, null, "\\longdashv", "relation"));
        symbols.add(new MathOperator(0x27DF, "up tack with circle above", "⟟", "Sm", 0, null, "\\cirbot", "relation"));
        symbols.add(new MathOperator(0x27E0, "lozenge divided by horizontal rule", "⟠", "Sm", 0, null, "\\lozengeminus", "binary relation"));
        symbols.add(new MathOperator(0x27E1, "white concave-sided diamond", "⟡", "Sm", 0, null, "\\concavediamond", "binary relation"));
        symbols.add(new MathOperator(0x27E2, "white concave-sided diamond with leftwards tick", "⟢", "Sm", 0, null, "\\concavediamondtickleft", "binary relation"));
        symbols.add(new MathOperator(0x27E3, "white concave-sided diamond with rightwards tick", "⟣", "Sm", 0, null, "\\concavediamondtickright", "binary relation"));
        symbols.add(new MathOperator(0x27E4, "white square with leftwards tick", "⟤", "Sm", 0, null, "\\whitesquaretickleft", "binary relation"));
        symbols.add(new MathOperator(0x27E5, "white square with rightwards tick", "⟥", "Sm", 0, null, "\\whitesquaretickright", "binary relation"));
        symbols.add(new MathOperator(0x27E6, "mathematical left white square bracket", "⟦", "Ps", 0, "\\llbracket", "\\lBrack", "opening"));
        symbols.add(new MathOperator(0x27E7, "mathematical right white square bracket", "⟧", "Pe", 0, "\\rrbracket", "\\rBrack", "closing"));
        symbols.add(new MathOperator(0x27E8, "mathematical left angle bracket", "⟨", "Ps", 0, "\\langle", null, "opening"));
        symbols.add(new MathOperator(0x27E9, "mathematical right angle bracket", "⟩", "Pe", 0, "\\rangle", null, "closing"));
        symbols.add(new MathOperator(0x27EA, "mathematical left double angle bracket", "⟪", "Ps", 0, "\\lang", "\\lAngle", "opening"));
        symbols.add(new MathOperator(0x27EB, "mathematical right double angle bracket", "⟫", "Pe", 0, "\\rang", "\\rAngle", "closing"));
        symbols.add(new MathOperator(0x27EC, "mathematical left white tortoise shell bracket", "⟬", "Ps", 0, null, "\\Lbrbrak", "opening"));
        symbols.add(new MathOperator(0x27ED, "mathematical right white tortoise shell bracket", "⟭", "Pe", 0, null, "\\Rbrbrak", "closing"));
        symbols.add(new MathOperator(0x27EE, "mathematical left flattened parenthesis", "⟮", "Ps", 0, "\\lgroup", null, "opening"));
        symbols.add(new MathOperator(0x27EF, "mathematical right flattened parenthesis", "⟯", "Pe", 0, "\\rgroup", null, "closing"));
        symbols.add(new MathOperator(0x2980, "triple vertical bar delimiter", "⦀", "Sm", 0, "\\VERT", "\\Vvert", "punctuation"));
        symbols.add(new MathOperator(0x2981, "z notation spot", "⦁", "Sm", 0, "\\spot", "\\mdsmblkcircle", "ordinary"));
        symbols.add(new MathOperator(0x2982, "z notation type colon", "⦂", "Sm", 0, null, "\\typecolon", "relation"));
        symbols.add(new MathOperator(0x2983, "left white curly bracket", "⦃", "Ps", 0, null, "\\lBrace", "opening"));
        symbols.add(new MathOperator(0x2984, "right white curly bracket", "⦄", "Pe", 0, null, "\\rBrace", "closing"));
        symbols.add(new MathOperator(0x2985, "left white parenthesis", "⦅", "Ps", 0, "\\Lparen", "\\lParen", "opening"));
        symbols.add(new MathOperator(0x2986, "right white parenthesis", "⦆", "Pe", 0, "\\Rparen", "\\rParen", "closing"));
        symbols.add(new MathOperator(0x2987, "z notation left image bracket", "⦇", "Ps", 0, "\\limg", "\\llparenthesis", "opening"));
        symbols.add(new MathOperator(0x2988, "z notation right image bracket", "⦈", "Pe", 0, "\\rimg", "\\rrparenthesis", "closing"));
        symbols.add(new MathOperator(0x2989, "z notation left binding bracket", "⦉", "Ps", 0, "\\lblot", "\\llangle", "opening"));
        symbols.add(new MathOperator(0x298A, "z notation right binding bracket", "⦊", "Pe", 0, "\\rblot", "\\rrangle", "closing"));
        symbols.add(new MathOperator(0x298B, "left square bracket with underbar", "⦋", "Ps", 0, null, "\\lbrackubar", "opening"));
        symbols.add(new MathOperator(0x298C, "right square bracket with underbar", "⦌", "Pe", 0, null, "\\rbrackubar", "closing"));
        symbols.add(new MathOperator(0x298D, "left square bracket with tick in top corner", "⦍", "Ps", 0, null, "\\lbrackultick", "opening"));
        symbols.add(new MathOperator(0x298E, "right square bracket with tick in bottom corner", "⦎", "Pe", 0, null, "\\rbracklrtick", "closing"));
        symbols.add(new MathOperator(0x298F, "left square bracket with tick in bottom corner", "⦏", "Ps", 0, null, "\\lbracklltick", "opening"));
        symbols.add(new MathOperator(0x2990, "right square bracket with tick in top corner", "⦐", "Pe", 0, null, "\\rbrackurtick", "closing"));
        symbols.add(new MathOperator(0x2991, "left angle bracket with dot", "⦑", "Ps", 0, null, "\\langledot", "opening"));
        symbols.add(new MathOperator(0x2992, "right angle bracket with dot", "⦒", "Pe", 0, null, "\\rangledot", "closing"));
        symbols.add(new MathOperator(0x2993, "left arc less-than bracket", "⦓", "Ps", 0, null, "\\lparenless", "opening"));
        symbols.add(new MathOperator(0x2994, "right arc greater-than bracket", "⦔", "Pe", 0, null, "\\rparengtr", "closing"));
        symbols.add(new MathOperator(0x2995, "double left arc greater-than bracket", "⦕", "Ps", 0, null, "\\Lparengtr", "opening"));
        symbols.add(new MathOperator(0x2996, "double right arc less-than bracket", "⦖", "Pe", 0, null, "\\Rparenless", "closing"));
        symbols.add(new MathOperator(0x2997, "left black tortoise shell bracket", "⦗", "Ps", 0, null, "\\lblkbrbrak", "opening"));
        symbols.add(new MathOperator(0x2998, "right black tortoise shell bracket", "⦘", "Pe", 0, null, "\\rblkbrbrak", "closing"));
        symbols.add(new MathOperator(0x2999, "dotted fence", "⦙", "Sm", 0, null, "\\fourvdots", "ordinary"));
        symbols.add(new MathOperator(0x299A, "vertical zigzag line", "⦚", "Sm", 0, null, "\\vzigzag", "ordinary"));
        symbols.add(new MathOperator(0x299B, "measured angle opening left", "⦛", "Sm", 0, null, "\\measuredangleleft", "ordinary"));
        symbols.add(new MathOperator(0x299C, "right angle variant with square", "⦜", "Sm", 0, null, "\\rightanglesqr", "ordinary"));
        symbols.add(new MathOperator(0x299D, "measured right angle with dot", "⦝", "Sm", 0, null, "\\rightanglemdot", "ordinary"));
        symbols.add(new MathOperator(0x299E, "angle with s inside", "⦞", "Sm", 0, null, "\\angles", "ordinary"));
        symbols.add(new MathOperator(0x299F, "acute angle", "⦟", "Sm", 0, null, "\\angdnr", "ordinary"));
        symbols.add(new MathOperator(0x29A0, "spherical angle opening left", "⦠", "Sm", 0, null, "\\gtlpar", "ordinary"));
        symbols.add(new MathOperator(0x29A1, "spherical angle opening up", "⦡", "Sm", 0, null, "\\sphericalangleup", "ordinary"));
        symbols.add(new MathOperator(0x29A2, "turned angle", "⦢", "Sm", 0, null, "\\turnangle", "ordinary"));
        symbols.add(new MathOperator(0x29A3, "reversed angle", "⦣", "Sm", 0, null, "\\revangle", "ordinary"));
        symbols.add(new MathOperator(0x29A4, "angle with underbar", "⦤", "Sm", 0, null, "\\angleubar", "ordinary"));
        symbols.add(new MathOperator(0x29A5, "reversed angle with underbar", "⦥", "Sm", 0, null, "\\revangleubar", "ordinary"));
        symbols.add(new MathOperator(0x29A6, "oblique angle opening up", "⦦", "Sm", 0, null, "\\wideangledown", "ordinary"));
        symbols.add(new MathOperator(0x29A7, "oblique angle opening down", "⦧", "Sm", 0, null, "\\wideangleup", "ordinary"));
        symbols.add(new MathOperator(0x29A8, "measured angle with open arm ending in arrow pointing up and right", "⦨", "Sm", 0, null, "\\measanglerutone", "ordinary"));
        symbols.add(new MathOperator(0x29A9, "measured angle with open arm ending in arrow pointing up and left", "⦩", "Sm", 0, null, "\\measanglelutonw", "ordinary"));
        symbols.add(new MathOperator(0x29AA, "measured angle with open arm ending in arrow pointing down and right", "⦪", "Sm", 0, null, "\\measanglerdtose", "ordinary"));
        symbols.add(new MathOperator(0x29AB, "measured angle with open arm ending in arrow pointing down and left", "⦫", "Sm", 0, null, "\\measangleldtosw", "ordinary"));
        symbols.add(new MathOperator(0x29AC, "measured angle with open arm ending in arrow pointing right and up", "⦬", "Sm", 0, null, "\\measangleurtone", "ordinary"));
        symbols.add(new MathOperator(0x29AD, "measured angle with open arm ending in arrow pointing left and up", "⦭", "Sm", 0, null, "\\measangleultonw", "ordinary"));
        symbols.add(new MathOperator(0x29AE, "measured angle with open arm ending in arrow pointing right and down", "⦮", "Sm", 0, null, "\\measangledrtose", "ordinary"));
        symbols.add(new MathOperator(0x29AF, "measured angle with open arm ending in arrow pointing left and down", "⦯", "Sm", 0, null, "\\measangledltosw", "ordinary"));
        symbols.add(new MathOperator(0x29B0, "reversed empty set", "⦰", "Sm", 0, null, "\\revemptyset", "ordinary"));
        symbols.add(new MathOperator(0x29B1, "empty set with overbar", "⦱", "Sm", 0, null, "\\emptysetobar", "ordinary"));
        symbols.add(new MathOperator(0x29B2, "empty set with small circle above", "⦲", "Sm", 0, null, "\\emptysetocirc", "ordinary"));
        symbols.add(new MathOperator(0x29B3, "empty set with right arrow above", "⦳", "Sm", 0, null, "\\emptysetoarr", "ordinary"));
        symbols.add(new MathOperator(0x29B4, "empty set with left arrow above", "⦴", "Sm", 0, null, "\\emptysetoarrl", "ordinary"));
        symbols.add(new MathOperator(0x29B5, "circle with horizontal bar", "⦵", "Sm", 0, null, "\\circlehbar", "binary relation"));
        symbols.add(new MathOperator(0x29B6, "circled vertical bar", "⦶", "Sm", 0, null, "\\circledvert", "binary relation"));
        symbols.add(new MathOperator(0x29B7, "circled parallel", "⦷", "Sm", 0, null, "\\circledparallel", "binary relation"));
        symbols.add(new MathOperator(0x29B8, "circled reverse solidus", "⦸", "Sm", 0, "\\circledbslash", "\\obslash", "binary relation"));
        symbols.add(new MathOperator(0x29B9, "circled perpendicular", "⦹", "Sm", 0, null, "\\operp", "binary relation"));
        symbols.add(new MathOperator(0x29BA, "circle divided by horizontal bar and top half divided by vertical bar", "⦺", "Sm", 0, null, "\\obot", "ordinary"));
        symbols.add(new MathOperator(0x29BB, "circle with superimposed x", "⦻", "Sm", 0, null, "\\olcross", "ordinary"));
        symbols.add(new MathOperator(0x29BC, "circled anticlockwise-rotated division sign", "⦼", "Sm", 0, null, "\\odotslashdot", "ordinary"));
        symbols.add(new MathOperator(0x29BD, "up arrow through circle", "⦽", "Sm", 0, null, "\\uparrowoncircle", "ordinary"));
        symbols.add(new MathOperator(0x29BE, "circled white bullet", "⦾", "Sm", 0, null, "\\circledwhitebullet", "ordinary"));
        symbols.add(new MathOperator(0x29BF, "circled bullet", "⦿", "Sm", 0, null, "\\circledbullet", "ordinary"));
        symbols.add(new MathOperator(0x29C0, "circled less-than", "⧀", "Sm", 0, "\\circledless", "\\olessthan", "binary relation"));
        symbols.add(new MathOperator(0x29C1, "circled greater-than", "⧁", "Sm", 0, "\\circledgtr", "\\ogreaterthan", "binary relation"));
        symbols.add(new MathOperator(0x29C2, "circle with small circle to the right", "⧂", "Sm", 0, null, "\\cirscir", "ordinary"));
        symbols.add(new MathOperator(0x29C3, "circle with two horizontal strokes to the right", "⧃", "Sm", 0, null, "\\cirE", "ordinary"));
        symbols.add(new MathOperator(0x29C4, "squared rising diagonal slash", "⧄", "Sm", 0, "\\boxslash", "\\boxdiag", "binary relation"));
        symbols.add(new MathOperator(0x29C5, "squared falling diagonal slash", "⧅", "Sm", 0, "\\boxbslash", null, "binary relation"));
        symbols.add(new MathOperator(0x29C6, "squared asterisk", "⧆", "Sm", 0, "\\boxast", null, "binary relation"));
        symbols.add(new MathOperator(0x29C7, "squared small circle", "⧇", "Sm", 0, "\\boxcircle", null, "binary relation"));
        symbols.add(new MathOperator(0x29C8, "squared square", "⧈", "Sm", 0, "\\boxbox", null, "binary relation"));
        symbols.add(new MathOperator(0x29C9, "two joined squares", "⧉", "Sm", 0, null, "\\boxonbox", "ordinary"));
        symbols.add(new MathOperator(0x29CA, "triangle with dot above", "⧊", "Sm", 0, null, "\\triangleodot", "ordinary"));
        symbols.add(new MathOperator(0x29CB, "triangle with underbar", "⧋", "Sm", 0, null, "\\triangleubar", "ordinary"));
        symbols.add(new MathOperator(0x29CC, "s in triangle", "⧌", "Sm", 0, null, "\\triangles", "ordinary"));
        symbols.add(new MathOperator(0x29CD, "triangle with serifs at bottom", "⧍", "Sm", 0, null, "\\triangleserifs", "binary relation"));
        symbols.add(new MathOperator(0x29CE, "right triangle above left triangle", "⧎", "Sm", 0, null, "\\rtriltri", "relation"));
        symbols.add(new MathOperator(0x29CF, "left triangle beside vertical bar", "⧏", "Sm", 0, "\\LeftTriangleBar", "\\ltrivb", "relation"));
        symbols.add(new MathOperator(0x29D0, "vertical bar beside right triangle", "⧐", "Sm", 0, "\\RightTriangleBar", "\\vbrtri", "relation"));
        symbols.add(new MathOperator(0x29D1, "bowtie with left half black", "⧑", "Sm", 0, null, "\\lfbowtie", "relation"));
        symbols.add(new MathOperator(0x29D2, "bowtie with right half black", "⧒", "Sm", 0, null, "\\rfbowtie", "relation"));
        symbols.add(new MathOperator(0x29D3, "black bowtie", "⧓", "Sm", 0, null, "\\fbowtie", "relation"));
        symbols.add(new MathOperator(0x29D4, "times with left half black", "⧔", "Sm", 0, null, "\\lftimes", "relation"));
        symbols.add(new MathOperator(0x29D5, "times with right half black", "⧕", "Sm", 0, null, "\\rftimes", "relation"));
        symbols.add(new MathOperator(0x29D6, "white hourglass", "⧖", "Sm", 0, null, "\\hourglass", "binary relation"));
        symbols.add(new MathOperator(0x29D7, "black hourglass", "⧗", "Sm", 0, null, "\\blackhourglass", "binary relation"));
        symbols.add(new MathOperator(0x29D8, "left wiggly fence", "⧘", "Ps", 0, null, "\\lvzigzag", "opening"));
        symbols.add(new MathOperator(0x29D9, "right wiggly fence", "⧙", "Pe", 0, null, "\\rvzigzag", "closing"));
        symbols.add(new MathOperator(0x29DA, "left double wiggly fence", "⧚", "Ps", 0, null, "\\Lvzigzag", "opening"));
        symbols.add(new MathOperator(0x29DB, "right double wiggly fence", "⧛", "Pe", 0, null, "\\Rvzigzag", "closing"));
        symbols.add(new MathOperator(0x29DC, "incomplete infinity", "⧜", "Sm", 0, null, "\\iinfin", "ordinary"));
        symbols.add(new MathOperator(0x29DD, "tie over infinity", "⧝", "Sm", 0, null, "\\tieinfty", "ordinary"));
        symbols.add(new MathOperator(0x29DE, "infinity negated with vertical bar", "⧞", "Sm", 0, null, "\\nvinfty", "ordinary"));
        symbols.add(new MathOperator(0x29DF, "double-ended multimap", "⧟", "Sm", 0, "\\multimapboth", "\\dualmap", "relation"));
        symbols.add(new MathOperator(0x29E0, "square with contoured outline", "⧠", "Sm", 0, null, "\\laplac", "ordinary"));
        symbols.add(new MathOperator(0x29E1, "increases as", "⧡", "Sm", 0, null, "\\lrtriangleeq", "relation"));
        symbols.add(new MathOperator(0x29E2, "shuffle product", "⧢", "Sm", 0, null, "\\shuffle", "binary relation"));
        symbols.add(new MathOperator(0x29E3, "equals sign and slanted parallel", "⧣", "Sm", 0, null, "\\eparsl", "relation"));
        symbols.add(new MathOperator(0x29E4, "equals sign and slanted parallel with tilde above", "⧤", "Sm", 0, null, "\\smeparsl", "relation"));
        symbols.add(new MathOperator(0x29E5, "identical to and slanted parallel", "⧥", "Sm", 0, null, "\\eqvparsl", "relation"));
        symbols.add(new MathOperator(0x29E6, "gleich stark", "⧦", "Sm", 0, null, "\\gleichstark", "relation"));
        symbols.add(new MathOperator(0x29E7, "thermodynamic", "⧧", "Sm", 0, null, "\\thermod", "ordinary"));
        symbols.add(new MathOperator(0x29E8, "down-pointing triangle with left half black", "⧨", "Sm", 0, null, "\\downtriangleleftblack", "ordinary"));
        symbols.add(new MathOperator(0x29E9, "down-pointing triangle with right half black", "⧩", "Sm", 0, null, "\\downtrianglerightblack", "ordinary"));
        symbols.add(new MathOperator(0x29EA, "black diamond with down arrow", "⧪", "Sm", 0, null, "\\blackdiamonddownarrow", "ordinary"));
        symbols.add(new MathOperator(0x29EB, "black lozenge", "⧫", "Sm", 0, "\\blacklozenge", "\\mdlgblklozenge", "binary relation"));
        symbols.add(new MathOperator(0x29EC, "white circle with down arrow", "⧬", "Sm", 0, null, "\\circledownarrow", "ordinary"));
        symbols.add(new MathOperator(0x29ED, "black circle with down arrow", "⧭", "Sm", 0, null, "\\blackcircledownarrow", "ordinary"));
        symbols.add(new MathOperator(0x29EE, "error-barred white square", "⧮", "Sm", 0, null, "\\errbarsquare", "ordinary"));
        symbols.add(new MathOperator(0x29EF, "error-barred black square", "⧯", "Sm", 0, null, "\\errbarblacksquare", "ordinary"));
        symbols.add(new MathOperator(0x29F0, "error-barred white diamond", "⧰", "Sm", 0, null, "\\errbardiamond", "ordinary"));
        symbols.add(new MathOperator(0x29F1, "error-barred black diamond", "⧱", "Sm", 0, null, "\\errbarblackdiamond", "ordinary"));
        symbols.add(new MathOperator(0x29F2, "error-barred white circle", "⧲", "Sm", 0, null, "\\errbarcircle", "ordinary"));
        symbols.add(new MathOperator(0x29F3, "error-barred black circle", "⧳", "Sm", 0, null, "\\errbarblackcircle", "ordinary"));
        symbols.add(new MathOperator(0x29F4, "rule-delayed", "⧴", "Sm", 0, null, "\\ruledelayed", "relation"));
        symbols.add(new MathOperator(0x29F5, "reverse solidus operator", "⧵", "Sm", 0, "\\setminus", null, "binary relation"));
        symbols.add(new MathOperator(0x29F6, "solidus with overbar", "⧶", "Sm", 0, null, "\\dsol", "binary relation"));
        symbols.add(new MathOperator(0x29F7, "reverse solidus with horizontal stroke", "⧷", "Sm", 0, null, "\\rsolbar", "binary relation"));
        symbols.add(new MathOperator(0x29F8, "big solidus", "⧸", "Sm", 0, null, "\\xsol", "big operators"));
        symbols.add(new MathOperator(0x29F9, "big reverse solidus", "⧹", "Sm", 0, "\\zhide", "\\xbsol", "big operators"));
        symbols.add(new MathOperator(0x29FA, "double +", "⧺", "Sm", 0, null, "\\doubleplus", "binary relation"));
        symbols.add(new MathOperator(0x29FB, "triple +", "⧻", "Sm", 0, null, "\\tripleplus", "binary relation"));
        symbols.add(new MathOperator(0x29FC, "left-pointing curved angle bracket", "⧼", "Ps", 0, null, "\\lcurvyangle", "opening"));
        symbols.add(new MathOperator(0x29FD, "right-pointing curved angle bracket", "⧽", "Pe", 0, null, "\\rcurvyangle", "closing"));
        symbols.add(new MathOperator(0x29FE, "tiny", "⧾", "Sm", 0, null, "\\tplus", "binary relation"));
        symbols.add(new MathOperator(0x29FF, "miny", "⧿", "Sm", 0, null, "\\tminus", "binary relation"));
        symbols.add(new MathOperator(0x2A00, "n-ary circled dot operator", "⨀", "Sm", 0, "\\bigodot", null, "big operators"));
        symbols.add(new MathOperator(0x2A01, "n-ary circled plus operator", "⨁", "Sm", 0, "\\bigoplus", null, "big operators"));
        symbols.add(new MathOperator(0x2A02, "n-ary circled times operator", "⨂", "Sm", 0, "\\bigotimes", null, "big operators"));
        symbols.add(new MathOperator(0x2A03, "n-ary union operator with dot", "⨃", "Sm", 0, null, "\\bigcupdot", "big operators"));
        symbols.add(new MathOperator(0x2A04, "n-ary union operator with +", "⨄", "Sm", 0, "\\biguplus", null, "big operators"));
        symbols.add(new MathOperator(0x2A05, "n-ary square intersection operator", "⨅", "Sm", 0, "\\bigsqcap", null, "big operators"));
        symbols.add(new MathOperator(0x2A06, "n-ary square union operator", "⨆", "Sm", 0, "\\bigsqcup", null, "big operators"));
        symbols.add(new MathOperator(0x2A07, "two logical and operator", "⨇", "Sm", 0, null, "\\conjquant", "big operators"));
        symbols.add(new MathOperator(0x2A08, "two logical or operator", "⨈", "Sm", 0, null, "\\disjquant", "big operators"));
        symbols.add(new MathOperator(0x2A09, "n-ary times operator", "⨉", "Sm", 0, "\\varprod", "\\bigtimes", "big operators"));
        symbols.add(new MathOperator(0x2A0A, "modulo two sum", "⨊", "Sm", 0, null, "\\modtwosum", "big operators"));
        symbols.add(new MathOperator(0x2A0B, "summation with integral", "⨋", "Sm", 0, null, "\\sumint", "big operators"));
        symbols.add(new MathOperator(0x2A0C, "quadruple integral operator", "⨌", "Sm", 0, "\\iiiint", null, "big operators"));
        symbols.add(new MathOperator(0x2A0D, "finite part integral", "⨍", "Sm", 0, null, "\\intbar", "big operators"));
        symbols.add(new MathOperator(0x2A0E, "integral with double stroke", "⨎", "Sm", 0, null, "\\intBar", "big operators"));
        symbols.add(new MathOperator(0x2A0F, "integral average with slash", "⨏", "Sm", 0, "\\fint", null, "big operators"));
        symbols.add(new MathOperator(0x2A10, "circulation function", "⨐", "Sm", 0, null, "\\cirfnint", "big operators"));
        symbols.add(new MathOperator(0x2A11, "anticlockwise integration", "⨑", "Sm", 0, null, "\\awint", "big operators"));
        symbols.add(new MathOperator(0x2A12, "line integration with rectangular path around pole", "⨒", "Sm", 0, null, "\\rppolint", "big operators"));
        symbols.add(new MathOperator(0x2A13, "line integration with semicircular path around pole", "⨓", "Sm", 0, null, "\\scpolint", "big operators"));
        symbols.add(new MathOperator(0x2A14, "line integration not including the pole", "⨔", "Sm", 0, null, "\\npolint", "big operators"));
        symbols.add(new MathOperator(0x2A15, "integral around a point operator", "⨕", "Sm", 0, null, "\\pointint", "big operators"));
        symbols.add(new MathOperator(0x2A16, "quaternion integral operator", "⨖", "Sm", 0, "\\sqint", null, "big operators"));
        symbols.add(new MathOperator(0x2A17, "integral with leftwards arrow with hook", "⨗", "Sm", 0, null, "\\intlarhk", "big operators"));
        symbols.add(new MathOperator(0x2A18, "integral with times sign", "⨘", "Sm", 0, null, "\\intx", "big operators"));
        symbols.add(new MathOperator(0x2A19, "integral with intersection", "⨙", "Sm", 0, null, "\\intcap", "big operators"));
        symbols.add(new MathOperator(0x2A1A, "integral with union", "⨚", "Sm", 0, null, "\\intcup", "big operators"));
        symbols.add(new MathOperator(0x2A1B, "integral with overbar", "⨛", "Sm", 0, null, "\\upint", "big operators"));
        symbols.add(new MathOperator(0x2A1C, "integral with underbar", "⨜", "Sm", 0, null, "\\lowint", "big operators"));
        symbols.add(new MathOperator(0x2A1D, "join", "⨝", "Sm", 0, "\\Join", null, "big operators"));
        symbols.add(new MathOperator(0x2A1E, "large left triangle operator", "⨞", "Sm", 0, null, "\\bigtriangleleft", "big operators"));
        symbols.add(new MathOperator(0x2A1F, "z notation schema composition", "⨟", "Sm", 0, "\\zcmp", null, "big operators"));
        symbols.add(new MathOperator(0x2A20, "z notation schema piping", "⨠", "Sm", 0, "\\zpipe", null, "big operators"));
        symbols.add(new MathOperator(0x2A21, "z notation schema projection", "⨡", "Sm", 0, "\\zproject", null, "big operators"));
        symbols.add(new MathOperator(0x2A22, "plus sign with small circle above", "⨢", "Sm", 0, null, "\\ringplus", "binary relation"));
        symbols.add(new MathOperator(0x2A23, "plus sign with circumflex accent above", "⨣", "Sm", 0, null, "\\plushat", "binary relation"));
        symbols.add(new MathOperator(0x2A24, "plus sign with tilde above", "⨤", "Sm", 0, null, "\\simplus", "binary relation"));
        symbols.add(new MathOperator(0x2A25, "plus sign with dot below", "⨥", "Sm", 0, null, "\\plusdot", "binary relation"));
        symbols.add(new MathOperator(0x2A26, "plus sign with tilde below", "⨦", "Sm", 0, null, "\\plussim", "binary relation"));
        symbols.add(new MathOperator(0x2A27, "plus sign with subscript two", "⨧", "Sm", 0, null, "\\plussubtwo", "binary relation"));
        symbols.add(new MathOperator(0x2A28, "plus sign with black triangle", "⨨", "Sm", 0, null, "\\plustrif", "binary relation"));
        symbols.add(new MathOperator(0x2A29, "minus sign with comma above", "⨩", "Sm", 0, null, "\\commaminus", "binary relation"));
        symbols.add(new MathOperator(0x2A2A, "minus sign with dot below", "⨪", "Sm", 0, null, "\\minusdot", "binary relation"));
        symbols.add(new MathOperator(0x2A2B, "minus sign with falling dots", "⨫", "Sm", 0, null, "\\minusfdots", "binary relation"));
        symbols.add(new MathOperator(0x2A2C, "minus sign with rising dots", "⨬", "Sm", 0, null, "\\minusrdots", "binary relation"));
        symbols.add(new MathOperator(0x2A2D, "plus sign in left half circle", "⨭", "Sm", 0, null, "\\opluslhrim", "binary relation"));
        symbols.add(new MathOperator(0x2A2E, "plus sign in right half circle", "⨮", "Sm", 0, null, "\\oplusrhrim", "binary relation"));
        symbols.add(new MathOperator(0x2A2F, "vector or cross product", "⨯", "Sm", 0, null, "\\vectimes", "binary relation"));
        symbols.add(new MathOperator(0x2A30, "multiplication sign with dot above", "⨰", "Sm", 0, null, "\\dottimes", "binary relation"));
        symbols.add(new MathOperator(0x2A31, "multiplication sign with underbar", "⨱", "Sm", 0, null, "\\timesbar", "binary relation"));
        symbols.add(new MathOperator(0x2A32, "semidirect product with bottom closed", "⨲", "Sm", 0, null, "\\btimes", "binary relation"));
        symbols.add(new MathOperator(0x2A33, "smash product", "⨳", "Sm", 0, null, "\\smashtimes", "binary relation"));
        symbols.add(new MathOperator(0x2A34, "multiplication sign in left half circle", "⨴", "Sm", 0, null, "\\otimeslhrim", "binary relation"));
        symbols.add(new MathOperator(0x2A35, "multiplication sign in right half circle", "⨵", "Sm", 0, null, "\\otimesrhrim", "binary relation"));
        symbols.add(new MathOperator(0x2A36, "circled multiplication sign with circumflex accent", "⨶", "Sm", 0, null, "\\otimeshat", "binary relation"));
        symbols.add(new MathOperator(0x2A37, "multiplication sign in double circle", "⨷", "Sm", 0, null, "\\Otimes", "binary relation"));
        symbols.add(new MathOperator(0x2A38, "circled division sign", "⨸", "Sm", 0, null, "\\odiv", "binary relation"));
        symbols.add(new MathOperator(0x2A39, "plus sign in triangle", "⨹", "Sm", 0, null, "\\triangleplus", "binary relation"));
        symbols.add(new MathOperator(0x2A3A, "minus sign in triangle", "⨺", "Sm", 0, null, "\\triangleminus", "binary relation"));
        symbols.add(new MathOperator(0x2A3B, "multiplication sign in triangle", "⨻", "Sm", 0, null, "\\triangletimes", "binary relation"));
        symbols.add(new MathOperator(0x2A3C, "interior product", "⨼", "Sm", 0, null, "\\intprod", "binary relation"));
        symbols.add(new MathOperator(0x2A3D, "righthand interior product", "⨽", "Sm", 0, null, "\\intprodr", "binary relation"));
        symbols.add(new MathOperator(0x2A3E, "z notation relational composition", "⨾", "Sm", 0, "\\fcmp", null, "binary relation"));
        symbols.add(new MathOperator(0x2A3F, "amalgamation or coproduct", "⨿", "Sm", 0, "\\amalg", null, "binary relation"));
        symbols.add(new MathOperator(0x2A40, "intersection with dot", "⩀", "Sm", 0, null, "\\capdot", "binary relation"));
        symbols.add(new MathOperator(0x2A41, "union with -", "⩁", "Sm", 0, null, "\\uminus", "binary relation"));
        symbols.add(new MathOperator(0x2A42, "union with overbar", "⩂", "Sm", 0, null, "\\barcup", "binary relation"));
        symbols.add(new MathOperator(0x2A43, "intersection with overbar", "⩃", "Sm", 0, null, "\\barcap", "binary relation"));
        symbols.add(new MathOperator(0x2A44, "intersection with logical and", "⩄", "Sm", 0, null, "\\capwedge", "binary relation"));
        symbols.add(new MathOperator(0x2A45, "union with logical or", "⩅", "Sm", 0, null, "\\cupvee", "binary relation"));
        symbols.add(new MathOperator(0x2A46, "union above intersection", "⩆", "Sm", 0, null, "\\cupovercap", "binary relation"));
        symbols.add(new MathOperator(0x2A47, "intersection above union", "⩇", "Sm", 0, null, "\\capovercup", "binary relation"));
        symbols.add(new MathOperator(0x2A48, "union above bar above intersection", "⩈", "Sm", 0, null, "\\cupbarcap", "binary relation"));
        symbols.add(new MathOperator(0x2A49, "intersection above bar above union", "⩉", "Sm", 0, null, "\\capbarcup", "binary relation"));
        symbols.add(new MathOperator(0x2A4A, "union beside and joined with union", "⩊", "Sm", 0, null, "\\twocups", "binary relation"));
        symbols.add(new MathOperator(0x2A4B, "intersection beside and joined with intersection", "⩋", "Sm", 0, null, "\\twocaps", "binary relation"));
        symbols.add(new MathOperator(0x2A4C, "closed union with serifs", "⩌", "Sm", 0, null, "\\closedvarcup", "binary relation"));
        symbols.add(new MathOperator(0x2A4D, "closed intersection with serifs", "⩍", "Sm", 0, null, "\\closedvarcap", "binary relation"));
        symbols.add(new MathOperator(0x2A4E, "double square intersection", "⩎", "Sm", 0, null, "\\Sqcap", "binary relation"));
        symbols.add(new MathOperator(0x2A4F, "double square union", "⩏", "Sm", 0, null, "\\Sqcup", "binary relation"));
        symbols.add(new MathOperator(0x2A50, "closed union with serifs and smash product", "⩐", "Sm", 0, null, "\\closedvarcupsmashprod", "binary relation"));
        symbols.add(new MathOperator(0x2A51, "logical and with dot above", "⩑", "Sm", 0, null, "\\wedgeodot", "binary relation"));
        symbols.add(new MathOperator(0x2A52, "logical or with dot above", "⩒", "Sm", 0, null, "\\veeodot", "binary relation"));
        symbols.add(new MathOperator(0x2A53, "double logical and", "⩓", "Sm", 0, null, "\\Wedge", "binary relation"));
        symbols.add(new MathOperator(0x2A54, "double logical or", "⩔", "Sm", 0, null, "\\Vee", "binary relation"));
        symbols.add(new MathOperator(0x2A55, "two intersecting logical and", "⩕", "Sm", 0, null, "\\wedgeonwedge", "binary relation"));
        symbols.add(new MathOperator(0x2A56, "two intersecting logical or", "⩖", "Sm", 0, null, "\\veeonvee", "binary relation"));
        symbols.add(new MathOperator(0x2A57, "sloping large or", "⩗", "Sm", 0, null, "\\bigslopedvee", "binary relation"));
        symbols.add(new MathOperator(0x2A58, "sloping large and", "⩘", "Sm", 0, null, "\\bigslopedwedge", "binary relation"));
        symbols.add(new MathOperator(0x2A59, "logical or overlapping logical and", "⩙", "Sm", 0, null, "\\veeonwedge", "relation"));
        symbols.add(new MathOperator(0x2A5A, "logical and with middle stem", "⩚", "Sm", 0, null, "\\wedgemidvert", "binary relation"));
        symbols.add(new MathOperator(0x2A5B, "logical or with middle stem", "⩛", "Sm", 0, null, "\\veemidvert", "binary relation"));
        symbols.add(new MathOperator(0x2A5C, "logical and with horizontal dash", "⩜", "Sm", 0, null, "\\midbarwedge", "binary relation"));
        symbols.add(new MathOperator(0x2A5D, "logical or with horizontal dash", "⩝", "Sm", 0, null, "\\midbarvee", "binary relation"));
        symbols.add(new MathOperator(0x2A5E, "logical and with double overbar", "⩞", "Sm", 0, "\\doublebarwedge", null, "binary relation"));
        symbols.add(new MathOperator(0x2A5F, "logical and with underbar", "⩟", "Sm", 0, null, "\\wedgebar", "binary relation"));
        symbols.add(new MathOperator(0x2A60, "logical and with double underbar", "⩠", "Sm", 0, null, "\\wedgedoublebar", "binary relation"));
        symbols.add(new MathOperator(0x2A61, "small vee with underbar", "⩡", "Sm", 0, null, "\\varveebar", "binary relation"));
        symbols.add(new MathOperator(0x2A62, "logical or with double overbar", "⩢", "Sm", 0, null, "\\doublebarvee", "binary relation"));
        symbols.add(new MathOperator(0x2A63, "logical or with double underbar", "⩣", "Sm", 0, null, "\\veedoublebar", "binary relation"));
        symbols.add(new MathOperator(0x2A64, "z notation domain antirestriction", "⩤", "Sm", 0, "\\dsub", null, "binary relation"));
        symbols.add(new MathOperator(0x2A65, "z notation range antirestriction", "⩥", "Sm", 0, "\\rsub", null, "binary relation"));
        symbols.add(new MathOperator(0x2A66, "equals sign with dot below", "⩦", "Sm", 0, null, "\\eqdot", "relation"));
        symbols.add(new MathOperator(0x2A67, "identical with dot above", "⩧", "Sm", 0, null, "\\dotequiv", "relation"));
        symbols.add(new MathOperator(0x2A68, "triple horizontal bar with double vertical stroke", "⩨", "Sm", 0, null, "\\equivVert", "relation"));
        symbols.add(new MathOperator(0x2A69, "triple horizontal bar with triple vertical stroke", "⩩", "Sm", 0, null, "\\equivVvert", "relation"));
        symbols.add(new MathOperator(0x2A6A, "tilde operator with dot above", "⩪", "Sm", 0, null, "\\dotsim", "relation"));
        symbols.add(new MathOperator(0x2A6B, "tilde operator with rising dots", "⩫", "Sm", 0, null, "\\simrdots", "relation"));
        symbols.add(new MathOperator(0x2A6C, "similar minus similar", "⩬", "Sm", 0, null, "\\simminussim", "relation"));
        symbols.add(new MathOperator(0x2A6D, "congruent with dot above", "⩭", "Sm", 0, null, "\\congdot", "relation"));
        symbols.add(new MathOperator(0x2A6E, "equals with asterisk", "⩮", "Sm", 0, null, "\\asteq", "relation"));
        symbols.add(new MathOperator(0x2A6F, "almost equal to with circumflex accent", "⩯", "Sm", 0, null, "\\hatapprox", "relation"));
        symbols.add(new MathOperator(0x2A70, "approximately equal or equal to", "⩰", "Sm", 0, null, "\\approxeqq", "relation"));
        symbols.add(new MathOperator(0x2A71, "equals sign above +", "⩱", "Sm", 0, null, "\\eqqplus", "binary relation"));
        symbols.add(new MathOperator(0x2A72, "plus sign above =", "⩲", "Sm", 0, null, "\\pluseqq", "binary relation"));
        symbols.add(new MathOperator(0x2A73, "equals sign above tilde operator", "⩳", "Sm", 0, null, "\\eqqsim", "relation"));
        symbols.add(new MathOperator(0x2A74, "double colon equal", "⩴", "Sm", 0, "\\Coloneqq", "\\Coloneq", "relation"));
        symbols.add(new MathOperator(0x2A75, "two consecutive equals signs", "⩵", "Sm", 0, "\\Equal", "\\eqeq", "relation"));
        symbols.add(new MathOperator(0x2A76, "three consecutive equals signs", "⩶", "Sm", 0, "\\Same", "\\eqeqeq", "relation"));
        symbols.add(new MathOperator(0x2A77, "equals sign with two dots above and two dots below", "⩷", "Sm", 0, null, "\\ddotseq", "relation"));
        symbols.add(new MathOperator(0x2A78, "equivalent with four dots above", "⩸", "Sm", 0, null, "\\equivDD", "relation"));
        symbols.add(new MathOperator(0x2A79, "less-than with circle inside", "⩹", "Sm", 0, null, "\\ltcir", "relation"));
        symbols.add(new MathOperator(0x2A7A, "greater-than with circle inside", "⩺", "Sm", 0, null, "\\gtcir", "relation"));
        symbols.add(new MathOperator(0x2A7B, "less-than with question mark above", "⩻", "Sm", 0, null, "\\ltquest", "relation"));
        symbols.add(new MathOperator(0x2A7C, "greater-than with question mark above", "⩼", "Sm", 0, null, "\\gtquest", "relation"));
        symbols.add(new MathOperator(0x2A7D, "less-than or slanted equal to", "⩽", "Sm", 0, "\\leqslant", null, "relation"));
        symbols.add(new MathOperator(0x2A7E, "greater-than or slanted equal to", "⩾", "Sm", 0, "\\geqslant", null, "relation"));
        symbols.add(new MathOperator(0x2A7F, "less-than or slanted equal to with dot inside", "⩿", "Sm", 0, null, "\\lesdot", "relation"));
        symbols.add(new MathOperator(0x2A80, "greater-than or slanted equal to with dot inside", "⪀", "Sm", 0, null, "\\gesdot", "relation"));
        symbols.add(new MathOperator(0x2A81, "less-than or slanted equal to with dot above", "⪁", "Sm", 0, null, "\\lesdoto", "relation"));
        symbols.add(new MathOperator(0x2A82, "greater-than or slanted equal to with dot above", "⪂", "Sm", 0, null, "\\gesdoto", "relation"));
        symbols.add(new MathOperator(0x2A83, "less-than or slanted equal to with dot above right", "⪃", "Sm", 0, null, "\\lesdotor", "relation"));
        symbols.add(new MathOperator(0x2A84, "greater-than or slanted equal to with dot above left", "⪄", "Sm", 0, null, "\\gesdotol", "relation"));
        symbols.add(new MathOperator(0x2A85, "less-than or approximate", "⪅", "Sm", 0, "\\lessapprox", null, "relation"));
        symbols.add(new MathOperator(0x2A86, "greater-than or approximate", "⪆", "Sm", 0, "\\gtrapprox", null, "relation"));
        symbols.add(new MathOperator(0x2A87, "less-than and single-line not equal to", "⪇", "Sm", 0, "\\lneq", null, "relation"));
        symbols.add(new MathOperator(0x2A88, "greater-than and single-line not equal to", "⪈", "Sm", 0, "\\gneq", null, "relation"));
        symbols.add(new MathOperator(0x2A89, "less-than and not approximate", "⪉", "Sm", 0, "\\lnapprox", null, "relation"));
        symbols.add(new MathOperator(0x2A8A, "greater-than and not approximate", "⪊", "Sm", 0, "\\gnapprox", null, "relation"));
        symbols.add(new MathOperator(0x2A8B, "less-than above double-line equal above greater-than", "⪋", "Sm", 0, "\\lesseqqgtr", null, "relation"));
        symbols.add(new MathOperator(0x2A8C, "greater-than above double-line equal above less-than", "⪌", "Sm", 0, "\\gtreqqless", null, "relation"));
        symbols.add(new MathOperator(0x2A8D, "less-than above similar or equal", "⪍", "Sm", 0, null, "\\lsime", "relation"));
        symbols.add(new MathOperator(0x2A8E, "greater-than above similar or equal", "⪎", "Sm", 0, null, "\\gsime", "relation"));
        symbols.add(new MathOperator(0x2A8F, "less-than above similar above greater-than", "⪏", "Sm", 0, null, "\\lsimg", "relation"));
        symbols.add(new MathOperator(0x2A90, "greater-than above similar above less-than", "⪐", "Sm", 0, null, "\\gsiml", "relation"));
        symbols.add(new MathOperator(0x2A91, "less-than above greater-than above double-line equal", "⪑", "Sm", 0, null, "\\lgE", "relation"));
        symbols.add(new MathOperator(0x2A92, "greater-than above less-than above double-line equal", "⪒", "Sm", 0, null, "\\glE", "relation"));
        symbols.add(new MathOperator(0x2A93, "less-than above slanted equal above greater-than above slanted equal", "⪓", "Sm", 0, null, "\\lesges", "relation"));
        symbols.add(new MathOperator(0x2A94, "greater-than above slanted equal above less-than above slanted equal", "⪔", "Sm", 0, null, "\\gesles", "relation"));
        symbols.add(new MathOperator(0x2A95, "slanted equal to or less-than", "⪕", "Sm", 0, "\\eqslantless", null, "relation"));
        symbols.add(new MathOperator(0x2A96, "slanted equal to or greater-than", "⪖", "Sm", 0, "\\eqslantgtr", null, "relation"));
        symbols.add(new MathOperator(0x2A97, "slanted equal to or less-than with dot inside", "⪗", "Sm", 0, null, "\\elsdot", "relation"));
        symbols.add(new MathOperator(0x2A98, "slanted equal to or greater-than with dot inside", "⪘", "Sm", 0, null, "\\egsdot", "relation"));
        symbols.add(new MathOperator(0x2A99, "double-line equal to or less-than", "⪙", "Sm", 0, null, "\\eqqless", "relation"));
        symbols.add(new MathOperator(0x2A9A, "double-line equal to or greater-than", "⪚", "Sm", 0, null, "\\eqqgtr", "relation"));
        symbols.add(new MathOperator(0x2A9B, "double-line slanted equal to or less-than", "⪛", "Sm", 0, null, "\\eqqslantless", "relation"));
        symbols.add(new MathOperator(0x2A9C, "double-line slanted equal to or greater-than", "⪜", "Sm", 0, null, "\\eqqslantgtr", "relation"));
        symbols.add(new MathOperator(0x2A9D, "similar or less-than", "⪝", "Sm", 0, null, "\\simless", "relation"));
        symbols.add(new MathOperator(0x2A9E, "similar or greater-than", "⪞", "Sm", 0, null, "\\simgtr", "relation"));
        symbols.add(new MathOperator(0x2A9F, "similar above less-than above =", "⪟", "Sm", 0, null, "\\simlE", "relation"));
        symbols.add(new MathOperator(0x2AA0, "similar above greater-than above =", "⪠", "Sm", 0, null, "\\simgE", "relation"));
        symbols.add(new MathOperator(0x2AA1, "double nested less-than", "⪡", "Sm", 0, "\\NestedLessLess", "\\Lt", "relation"));
        symbols.add(new MathOperator(0x2AA2, "double nested greater-than", "⪢", "Sm", 0, "\\NestedGreaterGreater", "\\Gt", "relation"));
        symbols.add(new MathOperator(0x2AA3, "double nested less-than with underbar", "⪣", "Sm", 0, null, "\\partialmeetcontraction", "relation"));
        symbols.add(new MathOperator(0x2AA4, "greater-than overlapping less-than", "⪤", "Sm", 0, null, "\\glj", "relation"));
        symbols.add(new MathOperator(0x2AA5, "greater-than beside less-than", "⪥", "Sm", 0, null, "\\gla", "relation"));
        symbols.add(new MathOperator(0x2AA6, "less-than closed by curve", "⪦", "Sm", 0, "\\leftslice", "\\ltcc", "relation"));
        symbols.add(new MathOperator(0x2AA7, "greater-than closed by curve", "⪧", "Sm", 0, "\\rightslice", "\\gtcc", "relation"));
        symbols.add(new MathOperator(0x2AA8, "less-than closed by curve above slanted equal", "⪨", "Sm", 0, null, "\\lescc", "relation"));
        symbols.add(new MathOperator(0x2AA9, "greater-than closed by curve above slanted equal", "⪩", "Sm", 0, null, "\\gescc", "relation"));
        symbols.add(new MathOperator(0x2AAA, "smaller than", "⪪", "Sm", 0, null, "\\smt", "relation"));
        symbols.add(new MathOperator(0x2AAB, "larger than", "⪫", "Sm", 0, null, "\\lat", "relation"));
        symbols.add(new MathOperator(0x2AAC, "smaller than or equal to", "⪬", "Sm", 0, null, "\\smte", "relation"));
        symbols.add(new MathOperator(0x2AAD, "larger than or equal to", "⪭", "Sm", 0, null, "\\late", "relation"));
        symbols.add(new MathOperator(0x2AAE, "equals sign with bumpy above", "⪮", "Sm", 0, null, "\\bumpeqq", "relation"));
        symbols.add(new MathOperator(0x2AAF, "precedes above single-line =", "⪯", "Sm", 0, "\\preceq", null, "relation"));
        symbols.add(new MathOperator(0x2AB0, "succeeds above single-line =", "⪰", "Sm", 0, "\\succeq", null, "relation"));
        symbols.add(new MathOperator(0x2AB1, "precedes above single-line not equal to", "⪱", "Sm", 0, null, "\\precneq", "relation"));
        symbols.add(new MathOperator(0x2AB2, "succeeds above single-line not equal to", "⪲", "Sm", 0, null, "\\succneq", "relation"));
        symbols.add(new MathOperator(0x2AB3, "precedes above =", "⪳", "Sm", 0, "\\preceqq", null, "relation"));
        symbols.add(new MathOperator(0x2AB4, "succeeds above =", "⪴", "Sm", 0, "\\succeqq", null, "relation"));
        symbols.add(new MathOperator(0x2AB5, "precedes above not equal to", "⪵", "Sm", 0, null, "\\precneqq", "relation"));
        symbols.add(new MathOperator(0x2AB6, "succeeds above not equal to", "⪶", "Sm", 0, null, "\\succneqq", "relation"));
        symbols.add(new MathOperator(0x2AB7, "precedes above almost equal to", "⪷", "Sm", 0, "\\precapprox", null, "relation"));
        symbols.add(new MathOperator(0x2AB8, "succeeds above almost equal to", "⪸", "Sm", 0, "\\succapprox", null, "relation"));
        symbols.add(new MathOperator(0x2AB9, "precedes above not almost equal to", "⪹", "Sm", 0, "\\precnapprox", null, "relation"));
        symbols.add(new MathOperator(0x2ABA, "succeeds above not almost equal to", "⪺", "Sm", 0, "\\succnapprox", null, "relation"));
        symbols.add(new MathOperator(0x2ABB, "double precedes", "⪻", "Sm", 0, "\\llcurly", "\\Prec", "relation"));
        symbols.add(new MathOperator(0x2ABC, "double succeeds", "⪼", "Sm", 0, "\\ggcurly", "\\Succ", "relation"));
        symbols.add(new MathOperator(0x2ABD, "subset with dot", "⪽", "Sm", 0, null, "\\subsetdot", "relation"));
        symbols.add(new MathOperator(0x2ABE, "superset with dot", "⪾", "Sm", 0, null, "\\supsetdot", "relation"));
        symbols.add(new MathOperator(0x2ABF, "subset with plus sign below", "⪿", "Sm", 0, null, "\\subsetplus", "relation"));
        symbols.add(new MathOperator(0x2AC0, "superset with plus sign below", "⫀", "Sm", 0, null, "\\supsetplus", "relation"));
        symbols.add(new MathOperator(0x2AC1, "subset with multiplication sign below", "⫁", "Sm", 0, null, "\\submult", "relation"));
        symbols.add(new MathOperator(0x2AC2, "superset with multiplication sign below", "⫂", "Sm", 0, null, "\\supmult", "relation"));
        symbols.add(new MathOperator(0x2AC3, "subset of or equal to with dot above", "⫃", "Sm", 0, null, "\\subedot", "relation"));
        symbols.add(new MathOperator(0x2AC4, "superset of or equal to with dot above", "⫄", "Sm", 0, null, "\\supedot", "relation"));
        symbols.add(new MathOperator(0x2AC5, "subset of above =", "⫅", "Sm", 0, "\\subseteqq", null, "relation"));
        symbols.add(new MathOperator(0x2AC6, "superset of above =", "⫆", "Sm", 0, "\\supseteqq", null, "relation"));
        symbols.add(new MathOperator(0x2AC7, "subset of above tilde operator", "⫇", "Sm", 0, null, "\\subsim", "relation"));
        symbols.add(new MathOperator(0x2AC8, "superset of above tilde operator", "⫈", "Sm", 0, null, "\\supsim", "relation"));
        symbols.add(new MathOperator(0x2AC9, "subset of above almost equal to", "⫉", "Sm", 0, null, "\\subsetapprox", "relation"));
        symbols.add(new MathOperator(0x2ACA, "superset of above almost equal to", "⫊", "Sm", 0, null, "\\supsetapprox", "relation"));
        symbols.add(new MathOperator(0x2ACB, "subset of above not equal to", "⫋", "Sm", 0, "\\subsetneqq", null, "relation"));
        symbols.add(new MathOperator(0x2ACC, "superset of above not equal to", "⫌", "Sm", 0, "\\supsetneqq", null, "relation"));
        symbols.add(new MathOperator(0x2ACD, "square left open box operator", "⫍", "Sm", 0, null, "\\lsqhook", "relation"));
        symbols.add(new MathOperator(0x2ACE, "square right open box operator", "⫎", "Sm", 0, null, "\\rsqhook", "relation"));
        symbols.add(new MathOperator(0x2ACF, "closed subset", "⫏", "Sm", 0, null, "\\csub", "relation"));
        symbols.add(new MathOperator(0x2AD0, "closed superset", "⫐", "Sm", 0, null, "\\csup", "relation"));
        symbols.add(new MathOperator(0x2AD1, "closed subset or equal to", "⫑", "Sm", 0, null, "\\csube", "relation"));
        symbols.add(new MathOperator(0x2AD2, "closed superset or equal to", "⫒", "Sm", 0, null, "\\csupe", "relation"));
        symbols.add(new MathOperator(0x2AD3, "subset above superset", "⫓", "Sm", 0, null, "\\subsup", "relation"));
        symbols.add(new MathOperator(0x2AD4, "superset above subset", "⫔", "Sm", 0, null, "\\supsub", "relation"));
        symbols.add(new MathOperator(0x2AD5, "subset above subset", "⫕", "Sm", 0, null, "\\subsub", "relation"));
        symbols.add(new MathOperator(0x2AD6, "superset above superset", "⫖", "Sm", 0, null, "\\supsup", "relation"));
        symbols.add(new MathOperator(0x2AD7, "superset beside subset", "⫗", "Sm", 0, null, "\\suphsub", "relation"));
        symbols.add(new MathOperator(0x2AD8, "superset beside and joined by dash with subset", "⫘", "Sm", 0, null, "\\supdsub", "relation"));
        symbols.add(new MathOperator(0x2AD9, "element of opening downwards", "⫙", "Sm", 0, null, "\\forkv", "relation"));
        symbols.add(new MathOperator(0x2ADA, "pitchfork with tee top", "⫚", "Sm", 0, null, "\\topfork", "relation"));
        symbols.add(new MathOperator(0x2ADB, "transversal intersection", "⫛", "Sm", 0, null, "\\mlcp", "relation"));
        symbols.add(new MathOperator(0x2ADC, "forking", "⫝̸", "Sm", 0, null, "\\forks", "relation"));
        symbols.add(new MathOperator(0x2ADD, "nonforking", "⫝", "Sm", 0, null, "\\forksnot", "relation"));
        symbols.add(new MathOperator(0x2ADE, "short left tack", "⫞", "Sm", 0, null, "\\shortlefttack", "relation"));
        symbols.add(new MathOperator(0x2ADF, "short down tack", "⫟", "Sm", 0, null, "\\shortdowntack", "relation"));
        symbols.add(new MathOperator(0x2AE0, "short up tack", "⫠", "Sm", 0, null, "\\shortuptack", "relation"));
        symbols.add(new MathOperator(0x2AE1, "perpendicular with s", "⫡", "Sm", 0, null, "\\perps", "ordinary"));
        symbols.add(new MathOperator(0x2AE2, "vertical bar triple right turnstile", "⫢", "Sm", 0, null, "\\vDdash", "relation"));
        symbols.add(new MathOperator(0x2AE3, "double vertical bar left turnstile", "⫣", "Sm", 0, null, "\\dashV", "relation"));
        symbols.add(new MathOperator(0x2AE4, "vertical bar double left turnstile", "⫤", "Sm", 0, null, "\\Dashv", "relation"));
        symbols.add(new MathOperator(0x2AE5, "double vertical bar double left turnstile", "⫥", "Sm", 0, null, "\\DashV", "relation"));
        symbols.add(new MathOperator(0x2AE6, "long dash from left member of double vertical", "⫦", "Sm", 0, null, "\\varVdash", "relation"));
        symbols.add(new MathOperator(0x2AE7, "short down tack with overbar", "⫧", "Sm", 0, null, "\\Barv", "relation"));
        symbols.add(new MathOperator(0x2AE8, "short up tack with underbar", "⫨", "Sm", 0, null, "\\vBar", "relation"));
        symbols.add(new MathOperator(0x2AE9, "short up tack above short down tack", "⫩", "Sm", 0, null, "\\vBarv", "relation"));
        symbols.add(new MathOperator(0x2AEA, "double down tack", "⫪", "Sm", 0, "\\Top", "\\barV", "relation"));
        symbols.add(new MathOperator(0x2AEB, "double up tack", "⫫", "Sm", 0, "\\Bot", "\\Vbar", "relation"));
        symbols.add(new MathOperator(0x2AEC, "double stroke not sign", "⫬", "Sm", 0, null, "\\Not", "relation"));
        symbols.add(new MathOperator(0x2AED, "reversed double stroke not sign", "⫭", "Sm", 0, null, "\\bNot", "relation"));
        symbols.add(new MathOperator(0x2AEE, "does not divide with reversed negation slash", "⫮", "Sm", 0, null, "\\revnmid", "relation"));
        symbols.add(new MathOperator(0x2AEF, "vertical line with circle above", "⫯", "Sm", 0, null, "\\cirmid", "relation"));
        symbols.add(new MathOperator(0x2AF0, "vertical line with circle below", "⫰", "Sm", 0, null, "\\midcir", "relation"));
        symbols.add(new MathOperator(0x2AF1, "down tack with circle below", "⫱", "Sm", 0, null, "\\topcir", "ordinary"));
        symbols.add(new MathOperator(0x2AF2, "parallel with horizontal stroke", "⫲", "Sm", 0, null, "\\nhpar", "relation"));
        symbols.add(new MathOperator(0x2AF3, "parallel with tilde operator", "⫳", "Sm", 0, null, "\\parsim", "relation"));
        symbols.add(new MathOperator(0x2AF4, "triple vertical bar binary relation", "⫴", "Sm", 0, "\\interleave", null, "binary relation"));
        symbols.add(new MathOperator(0x2AF5, "triple vertical bar with horizontal stroke", "⫵", "Sm", 0, null, "\\nhVvert", "binary relation"));
        symbols.add(new MathOperator(0x2AF6, "triple colon operator", "⫶", "Sm", 0, null, "\\threedotcolon", "binary relation"));
        symbols.add(new MathOperator(0x2AF7, "triple nested less-than", "⫷", "Sm", 0, null, "\\lllnest", "relation"));
        symbols.add(new MathOperator(0x2AF8, "triple nested greater-than", "⫸", "Sm", 0, null, "\\gggnest", "relation"));
        symbols.add(new MathOperator(0x2AF9, "double-line slanted less-than or equal to", "⫹", "Sm", 0, null, "\\leqqslant", "relation"));
        symbols.add(new MathOperator(0x2AFA, "double-line slanted greater-than or equal to", "⫺", "Sm", 0, null, "\\geqqslant", "relation"));
        symbols.add(new MathOperator(0x2AFB, "triple solidus binary relation", "⫻", "Sm", 0, null, "\\trslash", "binary relation"));
        symbols.add(new MathOperator(0x2AFC, "large triple vertical bar operator", "⫼", "Sm", 0, "\\biginterleave", null, "big operators"));
        symbols.add(new MathOperator(0x2AFD, "double solidus operator", "⫽", "Sm", 0, "\\sslash", null, "binary relation"));
        symbols.add(new MathOperator(0x2AFE, "white vertical bar", "⫾", "Sm", 0, "\\talloblong", null, "binary relation"));
        symbols.add(new MathOperator(0x2AFF, "n-ary white vertical bar", "⫿", "Sm", 0, null, "\\bigtalloblong", "big operators"));
    }
}